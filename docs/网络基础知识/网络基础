**0.互联网的组成**

- 边缘部分：所有连接在互联网上的主机（主机指的是所有与网络直接相连的计算机）组成，用户可以直接使用，用来进行主机之间的通信和资源共享。
- 核心部分：大量的网络与连接这些网络所使用的路由器构成，为边缘部分提供服务。
- 边缘部分总结

- - 边缘部分主要使用核心部分所提供的服务，使得许多主机之间能够互相通信并进行交换或共享信息。计算机之间的通信指的是主机A上的一个进程与主机B上的另一个进程之间进行通信。通信的方式主要有两种：

- - - 客户-服务器方式：即C /S方式。客户端发送服务的请求，服务器是服务的提供方。
    - P2P：对等连接方式。两台通信的主机之间不区分哪个是客户，哪个是服务端，只要两台主机都运行了对等连接软件就可以进行平等、对等的连接通信。

- 核心部分总结

- - 核心部分起到特殊作用的是路由器，它是一个专用的计算机，主要作用是**分组交换和存储转发**的功能。

- - - 电路交换：使用在电话机之间的通信，使用电话交换机解决了多个电话机之间通信需要大量的电线的问题。电路交换的过程是：**建立连接(开始占用通信资源)—通话(一直占用通信资源)----释放连接(归还通信资源)**。电路交换的特点是：通话期间，通话的两个用户会始终占用通信资源。使用电路交换传输计算机数据时，传输效率往往会很低。因为计算机数据具有突变式的特点，线路上真正用来传输数据的时间往往不到10%,大部分通信线路资源绝大部分时间都被浪费了。**整个报文的比特流连续的从源点直达终点**
    - 分组交换：采用**存储转发的技术**，把一个报文（需要发生出去的整块数据）划分成几组分组后再进行传输。将报文划分成更小的等长数据段，然后加上首部(包含一些控制信息)，构成了一个分组，分组的首部称为一个包头。**单个分组（只是整个报文的一部分）传送到相邻结点，存储下来后查找转发表，转发到下一个结点。**
    - 报文交换：**整个报文先传送到相邻结点，全部存储下来后查找转发表，转发到下一个结点。**
    - 路由器的工作流程：路由器接收到一个分组后，暂存数据到路由器自己的缓存中即自身的存储器中，然后检查其首部，查找转发表。按照首部中的目的地址，找到合适的接口转发除去，把分组交给下一个路由器。这样一步一步以存储转发的方式，把分组交给最终的目的主机。**路由器只是暂存一个分组，不是整个报文。分组在哪段链路上传送时才会占用此段链路上的通信资源，在各分组传输之间的空闲时间，此链路也是可以被其他主机发送的分组使用。**

**计算机网络中的常见硬件设备介绍：**

- 物理层：实现网络互连的主要设备有**中继器和HUB(集线器)**。中继器的主要功能是对接收到的信号进行再生整形放大以扩大网络的传输距离；集线器在此基础上将所有的节点集中在以它为中心的节点中，可组成星型拓扑结构。
- 数据链路层：实现网络互联的主要设备有**二层交换机和网桥**。交换机是一种基于MAC识别，能完成封装转发数据包功能的网络设备。它可以“学习”MAC地址，并把其存放在内部地址表中，当一个数据帧的目的地址在MAC地址表中有映射时，它被转发到连接目的节点的端口而不是所有端口。 交换机将局域网分为多个冲突域，每个冲突域都是有独立的宽带，因此大大提高了局域网的带宽。网桥是数据链路层互联的设备，在网络互联中可起到数据接收、地址过滤与数据转发的作用，可用来实现多个不同网络系统之间的数据交换。
- 网络层：实现网络互连的主要设备有**三层交换机和路由器**。路由器用于连接多个逻辑上分开的网络，具有判断网络地址和选择IP路径的功能，它能在多网络互联环境中，建立灵活的连接，可用完全不同的数据分组和介质访问方法连接各种子网。
- 传输层（包括传输层）以上：实现网络互连的设备有**网关**。网关在网络层以上实现网络互连，用于两个高层协议不同的网络互连。与网桥只是简单地传达信息不同，网关对收到的信息要重新打包，以适应目的系统的需求。

**1.计算机网络体系结构**

![img](D:\personalSpace\Repository\Foundation-java\image\tkxyzkzzdi5.jpeg)

- **应用层**：应用层是体系结构中的最高层。应用层直接为用户的应用进程程序提供服务。这里的进程就是指正在运行的程序。在因特网中的应用层协议很多，如支持万维网应用的http协议支持电子邮件的SMTP协议，支持文件传送的FTP协议等。
- **运输层**：运输层的任务就是负责向两个主机中进程之间的通信提供服务。由于一个主机可以同时运行多个进程，因此运输层有复用和分用的功能。复用就是多个应用层进程可以同时使用下面运输层的服务，分用就是运输层把收到的信息分别交付给上面应用层中的相应进程。

- - 运输层主要使用下面两个协议：

- - - 传输控制协议TCP：面向连接的，数据传输的基本单位是报文段，能够提供可靠的交付
    - 用户数据包协议UDP：无连接的，数据传输的基本单位是用户数据报，不能保证提供可靠的交付，只能提供**尽最大努力交付**。

- **网络层**： 负责为分组交换网上的不同主机提供通信服务。在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组或包进行传送。在TCP/IP体系中，由于网络层使用IP协议，因此分组也叫作IP数据报。
- **数据链路层**：两个主机之间的数据传输，总是在一段一段的链路上传送的。在两个相邻结点之间传送数据时，数据链路层将网络层交下来的IP数据报组装成帧，在两个相邻结点间的链路上透明地传送帧中的数据，每一帧包括数据和必要的控制信息。
- **物理层**：在物理层上传送的数据单位是比特。物理层的任务就是透明地传送比特流。

**2.各层的作用和支持的协议**

![img](D:\personalSpace\Repository\Foundation-java\image\tqzzjaxodqx.jpeg)

**3.物理层**

- 传输数据的基本单位：比特流0和1
- 数据传输系统：源系统（源点、发送器） --> 传输系统 --> 目的系统（接收器、终点）
- 通道：

- - 单向通道（单工通道）：只有一个方向通信，没有反方向交互，如广播
  - 双向交替通信（半双工通信）：通信双方都可发消息，但不能同时发送或接收
  - 双向同时通信（全双工通信）：通信双方可以同时发送和接收信息

- 通道复用技术：

- - 频分复用（FDM，Frequency Division Multiplexing）：不同用户在不同频带，所用用户在同样时间占用不同带宽资源
  - 时分复用（TDM，Time Division Multiplexing）：不同用户在同一时间段的不同时间片，所有用户在不同时间占用同样的频带宽度
  - 波分复用（WDM，Wavelength Division Multiplexing）：光的频分复用
  - 码分复用（CDM，Code Division Multiplexing）：不同用户使用不同的码，可以在同样时间使用同样频带通信

**4.数据链路层**

- 主要信道：

- - 点对点信道
  - 广播信道

- 点对点信道：

- - 数据单元：帧
  - 三个基本问题：

- - - 封装成帧：把网络层的 IP 数据报封装成帧，SOH - 数据部分 - EOT
    - 透明传输：不管数据部分什么字符，都能传输出去；可以通过字节填充方法解决（冲突字符前加转义字符）
    - 差错检测：降低误码率（BER，Bit Error Rate），广泛使用循环冗余检测（CRC，Cyclic Redundancy Check）

- - 点对点协议（Point-to-Point Protocol）：用户计算机和 ISP 通信时所使用的协议

- 广播信道：

- - 硬件地址（物理地址、MAC 地址）
  - 单播（unicast）帧（一对一）：收到的帧的 MAC 地址与本站的硬件地址相同
  - 广播（broadcast）帧（一对全体）：发送给本局域网上所有站点的帧
  - 多播（multicast）帧（一对多）：发送给本局域网上一部分站点的帧

**5.网络层**

- IP（Internet Protocol，网际协议）是为计算机网络相互连接进行通信而设计的协议。
- ARP（Address Resolution Protocol，地址解析协议）
- ICMP（Internet Control Message Protocol，网际控制报文协议）
- IGMP（Internet Group Management Protocol，网际组管理协议）

**5.1 IP网际协议**

- IP地址**({<网络号>,<主机号>})**分类：

![img](D:\personalSpace\Repository\Foundation-java\image\ziwzda5ywm3.jpeg)

- IP数据报格式：

![img](D:\personalSpace\Repository\Foundation-java\image\wm1mjhjn2u1.jpeg)

**5.2 ICMP网际控制报文协议**

- ICMP报文格式：

![img](D:\personalSpace\Repository\Foundation-java\image\0zdvjlmpwzw.jpeg)

- 应用：

- - PING（Packet InterNet Groper，分组网间探测）测试两个主机之间的连通性
  - TTL（Time To Live，生存时间）该字段指定 IP 包被路由器丢弃之前允许通过的最大网段数量

**5.3 内部网关协议**

- RIP（Routing Information Protocol，路由信息协议）
- OSPF（Open Sortest Path First，开放最短路径优先）

**5.4 外部网关协议**

- BGP（Border Gateway Protocol，边界网关协议）

**5.5 IP多播**

- IGMP（Internet Group Management Protocol，网际组管理协议）
- 多播路由选择协议

**5.6 VPN和NAT**

- VPN（Virtual Private Network，虚拟专用网）
- NAT（Network Address Translation，网络地址转换）

**5.7 路由表包含什么？**

- 网络 ID（Network ID, Network number）：就是目标地址的网络 ID。
- 子网掩码（subnet mask）：用来判断 IP 所属哪个子网络
- 下一跳地址/接口（Next hop / interface）：就是数据在发送到目标地址的旅途中下一站的地址。其中 interface 指向 next hop（即为下一个 route）。一个自治系统（AS, Autonomous system）中的 route 应该包含区域内所有的子网络，而默认网关（Network id: 0.0.0.0, Netmask: 0.0.0.0）指向自治系统的出口。
- 根据应用和执行的不同，路由表可能含有如下附加信息：

- - 花费（Cost）：就是数据发送过程中通过路径所需要的花费
  - 路由的服务质量
  - 路由中需要过滤的出/入连接列表

**6.传输层**

- 支持的协议：

- - TCP（Transmission Control Protocol，传输控制协议）
  - UDP（User Datagram Protocol，用户数据报协议）

- 端口号：

![img](D:\personalSpace\Repository\Foundation-java\image\hywuwlmpwzw.jpeg)

**6.1 TCP（Transmission Control Protocol，传输控制协议）**

- TCP是一种面向连接的、可靠的、基于字节流的传输层通信协议，其传输的单位是报文段。
- 特征：

- - 面向连接
  - 只能点对点（一对一）通信
  - 可靠交互
  - 全双工通信
  - 面向字节流

- TCP如何保证可靠传输？

- - 确认和超时重传
  - 数据合理分片和排序
  - 流量控制
  - 拥塞控制
  - 数据校验

- TCP报文结构

![img](D:\personalSpace\Repository\Foundation-java\image\wmmm3lmpwzw.jpeg)

- TCP首部

![img](D:\personalSpace\Repository\Foundation-java\image\tu5y2vkmgmz.jpeg)

- TCP：状态控制码（Code，Control Flag），占 6 比特，含义如下：

- - URG：紧急比特（urgent），当 URG＝1 时，表明紧急指针字段有效，代表该封包为紧急封包。它告诉系统此报文段中有紧急数据，应尽快传送(相当于高优先级的数据)， 且上图中的 Urgent Pointer 字段也会被启用。
  - ACK：确认比特（Acknowledge）。只有当 ACK＝1 时确认号字段才有效，代表这个封包为确认封包。当 ACK＝0 时，确认号无效。
  - PSH：（Push function）若为 1 时，代表要求对方立即传送缓冲区内的其他对应封包，而无需等缓冲满了才送。
  - RST：复位比特(Reset)，当 RST＝1 时，表明 TCP 连接中出现严重差错（如由于主机崩溃或其他原因），必须释放连接，然后再重新建立运输连接。
  - SYN：同步比特(Synchronous)，SYN 置为 1，就表示这是一个连接请求或连接接受报文，通常带有 SYN 标志的封包表示『主动』要连接到对方的意思。
  - FIN：终止比特(Final)，用来释放一个连接。当 FIN＝1 时，表明此报文段的发送端的数据已发送完毕，并要求释放传输连接。

**6. 2 UDP（User Datagram Protocol，用户数据报协议）**

- UDP是 OSI（Open System Interconnection 开放式系统互联） 参考模型中一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务，其传输的单位是用户数据报。
- 特征：

- - 无连接
  - 尽最大努力交付
  - 面向报文
  - 没有拥塞控制
  - 支持一对一、一对多、多对多的交互通信
  - 首部开销小

- UDP报文结构

![img](D:\personalSpace\Repository\Foundation-java\image\gu0mdc4yjuw.jpeg)

- UDP首部

![img](D:\personalSpace\Repository\Foundation-java\image\tyzmtziywqx.jpeg)

**6.3 TCP与UDP的区别**

- TCP面向连接、UDP是无连接的；
- TCP提供可靠的服务、也就是说，通过TCP连接传输的数据是无差错、不丢失、不重复且按序到达；UDP尽最大努力交付，即不保证可靠交付
- TCP的逻辑通信信息是全双工的可靠信息；UDP则是不可靠信息
- 每一条TCP连接只能是点对点的；UDP支持一对多、多对一、多对多的交互通信
- TCP面向字节流(可能会出现黏包问题)，实际上是TCP白数据看成一连串无结构的字节流；UDP是面向报文的(不会出现黏包问题)
- UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低(对实时应用很有用，如IP电话，实时视频会议等)
- TCP首部开销20字节；UDP的首部开销小，只有8字节

**6.4 TCP的黏包问题**

- 出现黏包问题的原因：TCP 是一个基于字节流的传输服务（UDP 基于报文的），“流” 意味着 TCP 所传输的数据是没有边界的，所以可能会出现两个数据包黏在一起的情况。
- 解决方法：

- - 发送定长包。如果每个消息的大小都是一样的，那么在接收对等方只要累计接收数据，直到数据等于一个定长的数值就将它作为一个消息。
  - 包头加上包体长度。包头是定长的 4 个字节，说明了包体的长度。接收对等方先接收包头长度，依据包头长度来接收包体。
  - 在数据包之间设置边界，如添加特殊符号 \r\n 标记。FTP 协议正是这么做的。但问题在于如果数据正文中也含有 \r\n，则会误判为消息的边界。
  - 使用更加复杂的应用层协议

**6.5 TCP流量控制**

- 概念：流量控制（flow control）就是让发送方的发送速率不要太快，要让接收方来得及接收。
- 方法：利用可变窗口进行流量控制

![img](D:\personalSpace\Repository\Foundation-java\image\gexmziwodfm.jpeg)

**6.6 TCP拥塞控制**

- 概念：拥塞控制就是防止过多的数据注入到网络中，可以使网络中的路由器或链路不致过载。
- 解决方法：

- - 慢启动( slow-start )
  - 拥塞避免( congestion avoidance )
  - 快重传( fast retransmit )
  - 快恢复( fast recovery )

![img](D:\personalSpace\Repository\Foundation-java\image\mzuyzjy0ngrm.png)

![img](D:\personalSpace\Repository\Foundation-java\image\nwy4mwi4mmiw.png)

![img](D:\personalSpace\Repository\Foundation-java\image\mwy5nge2ywzm.png)

**6.7 TCP传输连接管理(重点)**

- 一.TCP建立连接：三次握手

![img](D:\personalSpace\Repository\Foundation-java\image\n2yxmtbizjcx.png)

- TCP 建立连接全过程解释：

- - 1.客户端发生SYN给服务器，表示客户端向服务器请求建立连接；
  - 2.服务端收到客户端的SYN，并回复SYN+ACK给客户端(同意建立连接)；
  - 3.客户端收到来自服务器的SYN+ACK后，回复ACK给服务端(表示客户端收到了服务端发的同意报文)；
  - 4.服务端收到客户端的ACK，连接已建立，可以进行数据传输。

- 建立连接的详细过程：

- - a.B的TCP服务器进程首先创建传输控制块TCB,准备接受客户进程的连接请求。然后服务器进程就处于LISTEN(收听)状态，等待客户的连接请求。如有，就做出响应。
  - b.A的TCP客户进程也是首先创建传输控制模块TCB，然后向B发出连接请求报文段，这时首部中的同步位SYN=1，同时选择一个初始序号seq=x。TCP规定，SYN报文段(即SYN=1的报文段)不能携带数据，但是要消耗一个序号。这时，TCP客户进程进入SYN-SENT(同步已发送)状态。
  - c.B收到连接请求报文段后，如同意建立连接，则向A发送确认。在确认报文段中应把SYN和ACK位都置1，确认号是ack=x+1,同时也为自己选择一个初始序号seq=y。注意：**这个报文段也不能携带数据，但同样要消耗一个序号**。这时TCP服务器进程进入SYN-RECV(同步收到)状态。
  - d.TCP客户进程收到B的确认后，还要向B给出确认。确认报文段的ACK置1，确认号ack=y+1，而自己的序号seq=x+1。**TCP标准规定，ACK报文段可以携带数据。但如果不携带数据则不消耗序号**。在这种情况下，下一个数据报文段的序号仍然是seq=x+1。这时，TCP的连接已经建立，A进入ESTABLISHED(已建立连接)状态。当B接收到A的确认后，B也进入ESTABLISHED(已建立连接)状态。

- Q1：TCP为什么要进行三次握手？

- - 因为信道不可靠，而 TCP 想在不可靠信道上建立可靠地传输，那么三次通信是理论上的最小值。(而 UDP 则不需建立可靠传输，因此 UDP 不需要三次握手)
  - 因为双方都需要确认对方收到了自己发送的序列号，确认过程最少要进行三次通信
  - 为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误

- 二.TCP断开连接：四次挥手

![img](D:\personalSpace\Repository\Foundation-java\image\mmexnti3yje0.png)

- TCP 断开连接全过程解释：

- - 1.客户端发送 FIN 给服务器，说明客户端不必发送数据给服务器了（请求释放从客户端到服务器的连接）；
  - 2.服务器接收到客户端发的 FIN，并回复 ACK 给客户端（同意释放从客户端到服务器的连接）；
  - 3.客户端收到服务端回复的 ACK，此时从客户端到服务器的连接已释放（但服务端到客户端的连接还未释放，并且客户端还可以接收数据）；
  - 4.服务端继续发送之前没发完的数据给客户端；
  - 5.服务端发送 FIN+ACK 给客户端，说明服务端发送完了数据（请求释放从服务端到客户端的连接，就算没收到客户端的回复，过段时间也会自动释放）；
  - 6.服务端收到客户端的 ACK 后，断开从服务端到客户端的连接

- 释放连接的详细过程：

- - a.A和B都处于ESTABLISHED状态，A的应用进程首先向其TCP发出连接释放报文段，并停止再发送数据，主动关闭TCP连接。A把连接释放报文段首部的FIN置1，其序列号seq=u，它等于前面已经传送过的数据的最后一个字节的序号加1。这时，A进入FIN-WAIT-1(终止等待1)状态，等待B的确认。**注意：TCP规定：FIN报文段即使不携带数据，它也会消耗一个序号。**
  - b.B收到连接释放报文段后即发出确认，确认号是ack=u+1，而这个报文段自己的序号是v，等待B前面已经传送过的数据的最后一个字节的序号加1。然后B就进入CLOSE-WAIT(关闭等待)状态。TCP服务器进程这时应通知高层应用进程，因而从A到B这个方向的连接就释放了，这时的TCP连接处于半关闭状态，即A已经没有数据要发送了，但B若发送数据，A仍要接收。也就是说，从B到A这个方向的连接并没有关闭，这个连接可能会持续一段时间。
  - c.A收到来自B的确认后，就进入FIN-WAIT-2(终止等待2)状态，等待B发出的连接释放报文段。如果B已经没有要向A发送的数据，其应用进程就会通知TCP释放连接。这时B发出的连接释放报文段必须使FIN=1。现假定B的序号为w(在半关闭状态B可能又发送了一些数据)。B还必须重复上次已经发送过的确认号ack=u+1。这时，B就进入LAST-ACK(最后确认状态)，等待A的确认。
  - d.A在收到B的释放连接报文段后，必须对此发出一个确认。在确认报文段中把ACK置1，确认号ack=w+1，而自己的序号是seq=u+1(根据TCP标准，前面发送过的FIN报文段要消耗一个序号)。然后经过时间等待计时器(TIME-WAIT)设置的时间2MSL后，A才进入到CLOSED状态。时间MSL叫做最长报文段寿命

- Q2：TCP 为什么要进行四次挥手？

- - 因为 TCP 是全双工模式，客户端请求关闭连接后，客户端向服务端的连接关闭（一二次挥手），服务端继续传输之前没传完的数据给客户端（数据传输），服务端向客户端的连接关闭（三四次挥手）。所以 TCP 释放连接时服务器的 ACK 和 FIN 是分开发送的（中间隔着数据传输），而 TCP 建立连接时服务器的 ACK 和 SYN 是一起发送的（第二次握手），所以 TCP 建立连接需要三次，而释放连接则需要四次。

- Q3：为什么 TCP 建立连接时可以 ACK 和 SYN 一起发送，而断开连接时则 ACK 和 FIN 分开发送呢？（ACK 和 FIN 分开是指第二次和第三次挥手）

- - 因为客户端请求释放时，服务器可能还有数据需要传输给客户端，因此服务端要先响应客户端 FIN 请求（服务端发送 ACK），然后数据传输，传输完成后，服务端再提出 FIN 请求（服务端发送 FIN）；而连接时则没有中间的数据传输，因此连接时可以 ACK 和 SYN 一起发送。

- Q4：为什么客户端断开连接时，最后需要 TIME-WAIT 等待 2MSL 呢？

- - 1.为了保证客户端发送的最后一个 ACK 报文能够到达服务端。若未成功到达，则服务端超时重传 FIN+ACK 报文段，客户端再重传 ACK，并重新计时。
  - 2.防止已失效的连接请求报文段出现在本连接中。TIME-WAIT 持续 2MSL 可使本连接持续的时间内所产生的所有报文段都从网络中消失，这样可使下次连接中不会出现旧的连接报文段。

**6.8 TCP有限状态机**

![img](D:\personalSpace\Repository\Foundation-java\image\mwu4ztmxnju1.png)

**7.应用层**

**7.1 DNS(Domain Name System，域名系统)**

- DNS是互联网的一项服务。它作为将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS 使用 TCP 和 UDP 端口 53。当前，对于每一级域名长度的限制是 63 个字符，域名总长度则不能超过 253 个字符。
- 域名 ::= {<三级域名>.<二级域名>.<顶级域名>}，如：blog.huihut.com

**7.2 FTP(File Transfer Protocol，文件传输协议)**

- FTP是用于在网络上进行文件传输的一套标准协议，使用客户/服务器模式，使用 TCP 数据报，提供交互式访问，双向传输。
- TFTP（Trivial File Transfer Protocol，简单文件传输协议）一个小且易实现的文件传输协议，也使用客户-服务器方式，使用UDP数据报，只支持文件传输而不支持交互，没有列目录，不能对用户进行身份鉴定

**7.3 TELNET**

- TELNET 协议是 TCP/IP 协议族中的一员，是 Internet 远程登陆服务的标准协议和主要方式。它为用户提供了在本地计算机上完成远程主机工作的能力。

**7.4 HTTP（HyperText Transfer Protocol，超文本传输协议）**

- HTTP是用于从 WWW（World Wide Web，万维网）服务器传输超文本到本地浏览器的传送协议。

**7.5 SMTP（Simple Mail Transfer Protocol，简单邮件传输协议）**

- SMTP是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。SMTP 协议属于 TCP/IP 协议簇，它帮助每台计算机在发送或中转信件时找到下一个目的地。它是在 Internet 传输 Email 的标准，是一个相对简单的基于文本的协议。在其之上指定了一条消息的一个或多个接收者（在大多数情况下被确认是存在的），然后消息文本会被传输。可以很简单地通过 Telnet 程序来测试一个 SMTP 服务器，SMTP 使用 TCP 端口 25。

**7.6 DHCP（Dynamic Host Configuration Protocol，动态主机设置协议）**

- DHCP是一个局域网的网络协议，使用 UDP 协议工作，主要有两个用途：

- - 用于内部网络或网络服务供应商自动分配 IP 地址给用户
  - 用于内部网络管理员作为对所有电脑作中央管理的手段

**7.7 SNMP（Simple Network Management Protocol，简单网络管理协议）**

- SNMP构成了互联网工程工作小组（IETF，Internet Engineering Task Force）定义的 Internet 协议族的一部分。该协议能够支持网络管理系统，用以监测连接到网络上的设备是否有任何引起管理上关注的情况。

**8.相关概念**

**8.1 Socket（套接字）**

- Socket 建立网络通信连接至少要一对端口号（Socket）。Socket 本质是编程接口（API），对 TCP/IP 的封装，TCP/IP 也要提供可供程序员做网络开发所用的接口，这就是 Socket 编程接口。

**8.2 WWW（World Wide Web，环球信息网，万维网）**

- WWW是一个由许多互相链接的超文本组成的系统，通过互联网访问

**8.3 URL（Uniform Resource Locator，统一资源定位符）**

- 概念：URL是因特网上标准的资源的地址（Address）
- 标准格式：协议类型:[//服务器地址[:端口号]][/资源层级UNIX文件路径]文件名[?查询][#片段ID]
- 完整格式：协议类型:[//[访问资源需要的凭证信息@]服务器地址[:端口号]][/资源层级UNIX文件路径]文件名[?查询][#片段ID] 注意：其中[访问凭证信息@；:端口号；?查询；#片段ID]都属于选填项,可以省略，如：https://github.com/cdlwhm1217096231

**9.HTTP详解**

- 概念：HTTP（HyperText Transfer Protocol，超文本传输协议）是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP 是万维网的数据通信的基础。
- 请求方法：

![img](D:\personalSpace\Repository\Foundation-java\image\mrmzmu5yjzm.jpeg)

- 状态码：

- - 1xx：表示通知信息，如请求收到了或正在进行处理

- - - 100 Continue：继续，客户端应继续其请求
    - 101 Switching Protocols 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到 HTTP 的新版本协议

- - 2xx：表示成功，如接收或知道了

- - - 200 OK: 请求成功

- - 3xx：表示重定向，如要完成请求还必须采取进一步的行动

- - - 301 Moved Permanently: 永久移动。请求的资源已被永久的移动到新 URL，返回信息会包括新的 URL，浏览器会自动定向到新 URL。今后任何新的请求都应使用新的 URL 代替

- - 4xx：表示客户的差错，如请求中有错误的语法或不能完成

- - - 400 Bad Request: 客户端请求的语法错误，服务器无法理解
    - 401 Unauthorized: 请求要求用户的身份认证
    - 403 Forbidden: 服务器理解请求客户端的请求，但是拒绝执行此请求（权限不够）
    - 404 Not Found: 服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置 “您所请求的资源无法找到” 的个性页面
    - 408 Request Timeout: 服务器等待客户端发送的请求时间过长，超时

- - 5xx：表示服务器的差错，如服务器失效无法完成请求

- - - 500 Internal Server Error: 服务器内部错误，无法完成请求
    - 503 Service Unavailable: 由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的 Retry-After 头信息中
    - 504 Gateway Timeout: 充当网关或代理的服务器，未及时从远端服务器获取请求

**10.DNS(域名解析协议)**

- 域名的来由：我们可以通过IP地址去访问网站，但是对大多数用户来说，访问每个网站都需要记住一串数字是不现实的，所以用户可以通过域名来访问网站。域名，其实是具有一定含义的字符组合。**域名系统是因特网上作为域名和IP地址相互映射的一个分布式数据库，能让用户更方便使用互联网**。
- DNS劫持：指用户访问一个被标记的地址时，DNS服务器故意将此地址指向一个错误的IP地址的行为。范例：收到各种推送广告等网站
- DNS污染：指的是用户访问一个地址，国内的服务器(非DNS)监控到用户访问的已经被标记地址时，服务器伪装成DNS服务器向用户发回错误的地址的行为。比如不能访问Google、YouTube等。
- 域名表达式为，在地址表达式中，最右边的是最高层次的域名，最左边的是主机名，域与域之间用圆点隔开；
- 域名解析：通过主机最终得到该主机名对应的IP地址；

**11.Http协议格式**

- HTTP请求报文与响应报文格式

- - 请求报文包含三部分：

- - - 请求行：包含请求方法、URI、HTTP版本信息
    - 请求首部字段
    - 请求内容实体

- - 响应报文包含三部分：

- - - 状态行：包含HTTP版本、状态码、状态码的原因短语
    - 响应首部字段
    - 响应内容实体

- HTTP（超文本传输协议）是一个基于请求与响应模式的、无状态的、应用层的协议，常基于TCP的连接方式，HTTP1.1版本中给出一种持续连接的机制，绝大多数的Web开发，都是构建在HTTP协议之上的Web应用。
- 常用的HTTP方法有哪些？

- - GET：用于请求访问已经被URI（统一资源标识符）识别的资源，可以通过URL传参给服务器。
  - POST：用于传输信息给服务器，主要功能与GET方法类似，但一般推荐使用POST方式。
  - PUT：传输文件，报文主体中包含文件内容，保存到对应URI位置。
  - HEAD：获得报文首部，与GET方法类似，只是不返回报文主体，一般用于验证URI是否有效。
  - DELETE：删除文件，与PUT方法相反，删除对应URI位置的文件。
  - OPTIONS：查询相应URI支持的HTTP方法。

- GET方法与POST方法的区别

- - get重点在从服务器上获取资源，post重点在向服务器发送数据；
  - get传输数据是通过URL请求，以field（字段）= value的形式，置于URL后，并用"?“连接，多个请求数据间用”&"连接，如http://127.0.0.1/Test/login.action?name=admin&password=admin，这个过程用户是可见的；post传输数据通过Http的post机制，将字段与对应值封存在请求实体中发送给服务器，这个过程对用户是不可见的；
  - get传输的数据量小，因为受URL长度限制，但效率较高；Post可以传输大量数据，所以上传文件时只能用Post方式；
  - get是不安全的，因为URL是可见的，可能会泄露私密信息，如密码等；post较get安全性较高；
  - get方式只能支持ASCII字符，向服务器传的中文字符可能会乱码。post支持标准字符集，可以正确传递中文字符。

- HTTP1.1版本新特性

- - 默认持久连接节省通信量，只要客户端服务端任意一端没有明确提出断开TCP连接，就一直保持连接，可以发送多次HTTP请求
  - 管线化，客户端可以同时发出多个HTTP请求，而不用一个个等待响应
  - 断点续传原理

- 常见HTTP首部字段

- - 通用首部字段（请求报文与响应报文都会使用的首部字段）

- - - Date：创建报文时间
    - Connection：连接的管理
    - Cache-Control：缓存的控制
    - Transfer-Encoding：报文主体的传输编码方式

- - 请求首部字段（请求报文会使用的首部字段）

- - - Host：请求资源所在服务器
    - Accept：可处理的媒体类型
    - Accept-Charset：可接收的字符集
    - Accept-Encoding：可接受的内容编码
    - Accept-Language：可接受的自然语言

- - 响应首部字段（响应报文会使用的首部字段）

- - - Accept-Ranges：可接受的字节范围
    - Location：令客户端重新定向到的
    - URI Server：HTTP服务器的安装信息

- - 实体首部字段（请求报文与响应报文的的实体部分使用的首部字段）

- - - Allow：资源可支持的HTTP方法
    - Content-Type：实体主类的类型
    - Content-Encoding：实体主体适用的编码方式
    - Content-Language：实体主体的自然语言
    - Content-Length：实体主体的的字节数
    - Content-Range：实体主体的位置范围，一般用于发出部分请求时使用

- HTTP的缺点与HTTPS

- - 通信使用明文不加密，内容可能被窃听
  - 不验证通信方身份，可能遭到伪装
  - 无法验证报文完整性，可能被篡改
  - HTTPS就是HTTP加上加密处理（一般是SSL安全通信线路）+认证+完整性保护

**12.当你输入一个网址/点击一个链接，发生了什么？（以www.baidu.com为例）**

- 1.点击网址后，应用层的DNS协议会将网址解析为IP地址；

- - DNS查找过程：浏览器会检查缓存中有没有这个域名对应的解析过的IP地址，如果缓存中有，这个解析过程就将结束。如果用户的浏览器缓存中没有，浏览器会查找操作系统缓存（hosts文件）中是否有这个域名对应的DNS解析结果。若还没有，此时会发送一个数据包给DNS服务器，DNS服务器找到后将解析所得IP地址返回给用户。

- 2.在应用层，浏览器会给web服务器发送一个HTTP请求；

- - 请求头为：GET http://www.baidu.com/HTTP/1.1

- 3.在传输层，（上层的传输数据流分段）HTTP数据包会嵌入在TCP报文段中；

- - TCP报文段需要设置端口，接收方（百度）的HTTP端口默认是80，本机的端口是一个1024-65535之间的随机整数，这里假设为1025，这样TCP报文段由TCP首部（包含发送方和接收方的端口信息）+ HTTP数据包组。

- 4.在网络层中，TCP报文段再嵌入IP数据包中；

- - IP数据包需要知道双方的IP地址，本机IP地址假定为192.168.1.5，接受方IP地址为220.181.111.147（百度），这样IP数据包由IP头部（IP地址信息）+TCP报文段组成。

- 5.在网络接口层，IP数据包嵌入到数据帧（以太网数据包）中在网络上传送；

- - 数据帧中包含源MAC地址和目的MAC地址（通过ARP地址解析协议得到的）。这样数据帧由头部（MAC地址）+IP数据包组成。

- 6.数据包经过多个网关的转发到达百度服务器，请求对应端口的服务；

- - 服务接收到发送过来的以太网数据包开始解析请求信息，从以太网数据包中提取IP数据包—>TCP报文段—>HTTP数据包，并组装为有效数据交与对应线程池中分配的线程进行处理，在这个过程中，生成相应request、response。

- 7.请求处理完成之后，服务器发回一个HTTP响应；

- - 请求处理程序会阅读请求及它的参数和cookies。它会读取也可能更新一些数据，并将数据存储在服务器上。处理完毕后，数据通过response对象给客户输出信息，输出信息也需要拼接HTTP协议头部分，关闭后断开连接。断开后，服务器端自动注销request、response对象，并将释放对应线程的使用标识（一般一个请求单独由一个线程处理，部分特殊情况有一个线程处理多个请求的情况）。响应头为：HTTP/1.1200 OK

- 8.浏览器以同样的过程读取到HTTP响应的内容（HTTP响应数据包），然后浏览器对接收到的HTML页面进行解析，把网页显示出来呈现给用户。

- - 客户端接收到返回数据，去掉对应头信息，形成也可以被浏览器认识的页面HTML字符串信息，交与浏览器翻译为对应页面规则信息展示为页面内容。

**13.计算机的OSI和TCP/IP网络模型**

- 1.计算机的网络模型分为两种OSI模型和TCP/IP模型，它们的对应关系如下：

![img](D:\personalSpace\Repository\Foundation-java\image\bhmji3lnbuzw.png)

- 2.针对OSI模型，每一层都有各自的功能。

- - 应用层

- - - 应用层是OSI模型中最靠近用户的一层，负责为用户的应用程序提供网络服务 。包括为相互通信的应用程序或进程之间建立连接，进行同步建立关于错误纠正和控制同时还包含大量的应用协议，例如远程登录（talent）、简单的邮件传输协议（SMTP）、简单的网络管理协议（SNMP），超文本传输协议（HTTP）。所有能超声网络流量的程序都在应用层。

- - 表示层

- - - 表示层负责在不同的数据格式之间进行转换操作，以实现不同的计算机系统间的信息交换。还负责数据的加密，在传输的过程中进行保护，在发送端加密，在接收端解密，使用加密秘钥来对数据进行加密和解密。

- - 会话层

- - - 会话层的主要功能是在两个节点间建立连接、维护、释放面向用户的连接，并对会话进行管理和控制，保证会话数据可靠传输，在会话的过程中决定到底使用全双工还是使用半双工模式传输。

- - 传输层

- - - 传输层是OSI模型中唯一负责端到端节点数据传输和控制的层，传输层是在OSI模型中起承上启下的作用，它下面的三层主要主要面向网络通信，以确保信息准确有效的传输，上面的三层树妖面向主机用户，为用户提供各种服务。 传输层为了向会话层提供可靠的端到端传输服务，也使用差错控制和流量控制等机制。4层的协议有传输控制协议（TCP），用户数据报协议（UDP），顺序包交换协议（SPX）。

- - 网络层

- - - 负责选择最佳的路径，规划IP(Internet Protocol)地址。

- - 数据链路层

- - - 数据帧的开始和结束，同时提供透明传输，差错校验。

- - 物理层

- - - 是OSI模型的最底层，它面向原始的比特流的传输，同时规范了接口标准。

- 3.针对TCP/IP模型，每一层都有各自的功能。

- - 物理层：对应OSI模型的低两层，物理层和数据链路层；常用协议：Ethernet、FDDI、令牌环
  - 网络层：对应OSI模型的网络层；常用协议：IP、ARP、RAR、ICMP
  - 传输层：对应OSI模型的传输层；常用协议：TCP、UDP
  - 应用层：对应OSI模型的高三层，会话层、表示层、应用层；常用协议：DNS、HTTP、SMTP、POP、TELNET、FTP

**14.TCP/FTP 简析**

- 1.TCP/FTP简析
- TCP/IP是个协议组，可分为三个层次：网络层、传输层和应用层：

- - 网络层：IP协议、ICMP协议、ARP协议、RARP协议和BOOTP协议
  - 传输层：TCP协议与UDP协议
  - 应用层：FTP、HTTP、TELNET、SMTP、DNS等协议

- 2.TCP连接的三次握手

- - 第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；
  - 第二次握手：服务端接收到客户端的请求后，给出一个确认ACK(ack=j+1),同时自己也发送出一个SYN包(syn=k),此时服务器进入SYN_RECV状态。
  - 第三次握手：客户端接收到服务端的SYN+ACK包后，向服务器发出一个确认ACK(ack=k+1)，此包发送完毕，客户端和服务端进入ESTABLIST状态，完成三次握手。

- 3.FTP
- 文件传输协议（File Transfer Protocol, FTP）是TCP/IP网络上两台计算机传送文件的协议，FTP是在TCP/IP网络和INTERNET上最早使用的协议之一，它属于网络协议组的应用层。FTP客户机可以给服务器发出命令来下载文件，上载文件，创建或改变服务器上的目录。

**15.IP地址与子网掩码**

- 1.IP地址：Internet上每台主机都必须有一个唯一的地址以区别于其他主机，这个地址就是Internet地址，也称作IP地址；IPv4（第四版本的IP协议）是构成现今互联网技术的基石协议；
- 2.IP地址的构成：IP地址由32位二进制构成，共约40亿个，由网络地址和主机地址构成；一个IP地址分为四段：a.b.c.d ，段与段之间用原点分开。IP地址表示方法：二进制形式和点分十进制形式；
- 3.IP地址的分类：5类(A类地址，B类地址，C类地址，D类地址，E类地址)
- IP地址的分类是根据第一段（a字段，前8位）的取值范围来划分的；

- - A类地址：以0开头，前8位为网络地址，后24位为主机地址。A类地址第一段a字段的取值范围1~126。每一个A类地址中可以容纳的主机的数目约为1600万。地址范围：1.0.0.0~126.255.255.255
  - B类地址：以10开头，前16位为网络地址，后16位为主机地址。B类地址第一段a字段取值范围为128~191。每一个B类地址中可以容纳主机数目约为65000。地址范围：128.0.0.0~191.255.255.255
  - C类地址：以110开头，前24位为网络地址，后8位为主机地址。C类地址第一段a字段的取值范围是192~223。每一个C类地址可容纳主机的数目约为254。地址范围：192.0.0.0~223.255.255.255

- 4.IPv6（第六版IP协议）：一个IP地址由128位二进制组成，采用冒分16进制。
- 5.特殊的IP地址：

- - a.专用IP地址：三类网络号，这些地址不会被Internet分配因此也不能被路由。

- - - A类：1.0.0.0~10.255.255.255 （长度相当于1个A类IP地址）
    - B类：172.16.0.0~172.31.255.255 （长度相当于16个连续的B类IP地址）
    - C类：192.168.0.0~192.168.255.255 （长度相当于256个连续的C类IP地址）

- - b. 特殊IP地址：

- - - 0.0.0.0 是全零网络代表默认网络，帮助路由器发送路由表中无法查询的包。如果设置了全零网络路由，路由器中无法查询的包都会被送到全零网络的路由中去；
    - 127.0.0.1 称作回送地址，属于环回地址，IP从127.0.0.0到127.255.255.255都将环回到本地主机中；
    - 255.255.255.255 限制广播地址，对本机来说，这个地址指本网段内（同一广播域）所有主机；

- 6.子网掩码
- 子网掩码：是一个32位二进制的值，可以将IP地址分离出网络地址和主机地址，采用点分十进制的形式。子网掩码不能单独存在它必须结合IP地址一起使用。
- 子网掩码由1和0组成，且1和0分别连续。**子网掩码的长度也是32位。左边是网络位，用二进制数字1表示，1的数目等于网络位的长度；右边是主机位用2进制数字0表示，0的数目等于主机位的长度；这样做的目的是为了让掩码与IP地址做与运算时用0遮住原主机数，而不改变网络段的数字；而且很容易通过0的位数确定子网的主机数；**将32位IP地址与32位的子网掩码各位进制进行 ‘与’ 运算，得到的是该IP地址的网络地址；
- 方法：**子网掩码可以判断两台计算机是否属于同一网段，将计算机10进制的IP地址和子网掩码转换为2进制的形式，然后进行‘与’运算，如果网络地址是相同的，那么两台计算机就属于同一网段；**
- 子网掩码可分为缺省子网掩码和自定义子网掩码：

- - a.缺省（默认）子网掩码：即为划分子网，对应的网络号都是1，主机号位都是0；

- - - A类网络缺省（默认）子网掩码：255.0.0.0
    - B类网络缺省（默认）子网掩码：255.255.0.0
    - C类网络缺省（默认）子网掩码：255.255.255.0

- - b.自定义子网掩码是将一个网络划分为几个子网，需要每一段使用不同的网络号或者子网号，实际上我们可以认为是将主机号分为两个部分：子网号和子网主机号。形式如下：

- - - 未做子网划分的IP地址：网络号+主机号
    - 做子网划分的IP地址：网络号+子网号+子网主机号。也就是说，IP地址在子网划分后，以前的主机号一部分给了子网号，剩下的是子网主机号；

- 子网掩码通常有两种格式的表示方式：

- - 点分十进制格式，如：255.255.255.128
  - IP地址后面加上‘/’符号以及1-32位的数字，其中1-32的数字表示子网掩码中网络标识位的长度；例如：192.168.1.1/24的子网掩码也可以表示为255.255.255.0

**16.路由器**

- 路由器：属于网络层，是连接因特网中的各局域网、广域网的设备，它会根据信道的情况自动选择和设定路由，以最佳路径，按照前后顺序发送信号。连接不同的网络，所谓不同的网络就是网络地址不同；路由器工作在IP协议网络层，用于实现子网之间转发数据，路由器一般包含多个网络接口，包括局域网和广域网接口，每个网络接口连接不同的网络；路由器记录着每个网络端口连接的网络信息；路由器中还包含路由表：记录了去往不同的网络地址应该送往的端口号；
- 作用：为每个数据帧寻找最佳的传输路径，并将其有效的传送到目的站点，在路由器中通过路由表保存着各种传输路径的相关数据，供路由选择时使用。
- 路由表：保存各种传输路径的相关数据，供路由选择时使用；路由表中保存着子网的标志信息、网上路由器的个数和下一个路由器的名字等内容；
- 静态路由表：由系统管理员事先设定好的路由表；
- 动态路由表：路由器根据网络系统的运行情况动态调整的路由表；
- 工作流程：数据包送到路由器后，通过数据包首部的目的主机IP地址和子网掩码计算出网络地址，即目的主机所在的网络，查找当前路由器的路由表，选择端口进行转发;下一台IP路由器收到数据包后继续转发，直到目的地；**路由转发策略称为路由选择；**
- 路由器和交换机之间的主要区别是：交换机发生在OSI参考模型的第二层（数据链路层），而路由器发生在第三层（网络层）。路由器是不同网络之间相互连接的枢纽，路由器构成了Internet的骨架；路由器具有判断网路地址，选择IP路径的功能；

**17.MAC地址(物理地址、硬件地址)的概念和作用**

- 概念：MAC地址就是在媒体接入层上使用的地址，也叫物理地址、硬件地址或链路地址，其被固化在适配器的ROM中。可见，MAC地址实际上就是适配器地址或适配器标识符。当某台计算机使用某块适配器后，适配器上的标识符就成为该计算机的MAC地址。MAC地址长度为6字节（48比特），由IEEE的注册管理结构RA进行管理分配。
- 作用：MAC地址是计算机的唯一标识，在数据链路层中，交换机通过识别MAC地址进行数据包的传输。

**18.路由表中的内容**

- Network Destination：目标网段；Netmask：子网掩码，IP地址与子网掩码按位与，可以得出该IP地址的网络号，IP地址与子网掩码取反后按位与，可以得出该IP地址的主机号。Interface：达到该目标网段的本地路由器的出口IP；Gateway：网关IP，下一跳路由器的入口IP，通常情况下，interface和gateway是同一网段的。Metric：跳数，该条路由记录的质量，一般情况下，如果有多条到达相同目的地的路由记录，路由器会采用metric值小的那条路由。

**19.分组转发算法流程**

- 1.从数据报的首部提取目的主机的IP地址D，得出目的网络地址N（子网掩码和IP地址做与运算可得出网络地址）。
- 2.若N就是于此路由器直接相连的某个网络地址，则进行直接交付，不需要在经过其他路由器，直接把数据报交付给目的主机（这里包括把目的IP地址D转换为具体的MAC地址（ARP协议），把数据报封装成MAC帧，在发送此帧）；否则就是间接交付。
- 3.若路由表中有目的地址为D的特定主机路由，则把数据报传送给路由表中所指明的下一跳路由器。
- 4.若路由表中有达到网络N的路由，则把数据报传送给路由表中所指明的下一跳路由器。
- 5.若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器。
- 6.报告转发分组出错。

**20.TFTP与FTP的区别**

- FTP（File Transfer Protocol，文件传输协议）协议在TCP/IP协议族中属于应用层协议，**用于在远端服务器和本地客户端之间传输文件，使用TCP端口20和21进行传输**。端口20用于传输数据，端口21用于传输控制消息。
- TFTP（Trivial File Transfer Protocol，简单文件传输协议）也是用于在远端服务器和本地主机之间传输文件的，相对于FTP，TFTP没有复杂的交互存取接口和认证控制，适用于客户端和服务器之间不需要复杂交互的环境。
- TFTP协议的运行基于UDP协议，使用UDP端口69进行数据传输。
- 区别：

- - 基于的传输协议不一样：FTP是基于TCP TFTP是基于UDP
  - 端口号不一样：FTP是用21.20 TFTP是69
  - 速度和安全方面：FTP在速度方面没有TFTP快但是FTP安全好

**21.MTU的概念，什么是路径MTU？ MTU发现机制，TraceRoute**

- MTU：即Maximum Transmission Unit 最大传输单元。它是指一种通信协议的某一层上面所能通过的最大数据包大小（以字节为单位）。
- 路径MTU：路径MTU是指一条因特网传输路径中，从源地址到目的地址所经过的“路径”上的所有IP跳的最大传输单元的最小值。或者从另外一个角度来看，就是无需进行分片处理就能穿过这条“路径”的最大传输单元的最大值。
- 路径MTU的发现方法：这是确定两个IP主机之间路径最大传输单元的技术，其目的就是为了避免IP分片。首先源地址将数据报的DF位置位，在逐渐增大发送的数据报的大小——路径上任何需要将分组进行分片的设备都会将这种数据报丢弃并返回“数据报过大“的ICMP响应到源地址——这样源主机就”学习“到了无需分片就能通过这条路径的最大的最大传输单元。
- Traceroute:用来侦测主机到目的主机之间所经路由情况的重要工具。原理如下：它受到目的主机的IP后，首先给目的主机发送一个TTL=1的UDP数据包（每次送出的为3个40字节的包，包括源地址，目的地址和包发出的时间标签），而经过的第一个路由器收到这个数据包以后，就自动把TTL减1，而TTL变为0以后，路由器就把这个包给抛弃了，并同时产生 一个主机不可达的ICMP数据报给主机。主机收到这个数据报以后再发一个TTL=2的UDP数据报给目的主机，然后刺激第二个路由器给主机发ICMP数据报。如此往复直到到达目的主机。这样，traceroute就拿到了所有的路由器ip。Traceroute提取发送 ICMP TTL到期消息设备的IP地址并作域名解析。每次 ，Traceroute都打印出一系列数据,包括所经过的路由设备的域名及 IP地址,三个包每次来回所花时间。

**22.ICMP协议**

- 概念：ICMP的全称是 Internet Control Message Protocol ，它是一种“错误侦测与回报机制”，不传输用户数据，其目的就是让我们能够检测网路的连线状况。ICMP数据包由一个8字节长的包头，其中前四个字节是固定格式，包括8位类型字段、8位代码字段个16位校验和；后4个字节根据ICMP类型的不同而取不同的值；
- 作用：

- - 侦测远端主机是否存在
  - 建立及维护路由资料
  - 重导数据传送路径
  - 数据流量控制

- Internet 控制报文协议，负责发送消息，报告错误；属于TCP/IP协议族；主要用在主机和路由器之间，ICMP提供移动的出错报告信息，但是他的功能是报告问题而不是纠正问题，他将出错的报文返回发送方，纠正问题的功能由发送方完成；发送方根据ICMP提供的错误类型来确定如何才能更好的重新发送失败的数据包；
- 应用：Ping命令其实就是ICMP协议的工作过程；Tracert命令，跟踪路由的命令也是基于ICMP协议的；

**23.组播和广播的概念，IGMP的用途**

- 组播：主机之间的通讯模式，也就是加入了同一个组的主机可以接收到此组内的所有数据，网络中的交换机和路由器只向有需求者复制并转发其所需数据。主机可以向路由器请求加入或退出某个组，网络中的路由器和交换机有选择的复制并传输数据，即只将组内数据传输给那些加入组的主机。这样既能一次将数据传输给多个有需要（加入组）的主机，又能保证不影响其他不需要（未加入组）的主机的其他通讯。
- 广播： 是指在IP子网内广播数据包，所有在子网内部的主机都将收到这些数据包。广播意味着网络向子网每一个主机都投递一份数据包，不论这些主机是否乐于接收该数据包。所以广播的使用范围非常小，只在本地子网内有效，通过路由器和网络设备控制广播传输。组播协议与现在广泛使用的单播协议的不同之处在于，一个主机用单播协议向n个主机发送相同的数据时，发送主机需要分别向n个主机发送，共发送n次。一个主机用组播协议向n个主机发送相同的数据时，只要发送1次，其数据由网络中的路由器和交换机逐级进行复制并发送给各个接收方，这样既节省服务器资源也节省网络主干的带宽资源。
- IGMP（Internet Group Management Protocol）的用途

- - 它用来在ip主机和与其直接相邻的组播路由器之间建立、维护组播组成员关系。组播路由器不需要保存所有主机的成员关系，它只是通过IGMP协议了解每个接口连接的网段上是否存在某个组播组的组成员，而主机只需要保存自己加入了哪些组播组。简而言之，IGMP协议是让连接在本地局域网上的组播路由器知道本局域网上是否有主机上的某个进程参加或退出了某个组播组。

- 环回地址/广播地址

- - 环回地址：127.0.0.1，通常被称为本地回环地址(Loop back address)，不属于任何一个有类别地址类。它代表设备的本地虚拟接口，所以默认被看作是永远不会宕掉的接口。
  - 作用：

- - - a.一是测试本机的网络配置，能PING通127.0.0.1说明本机的网卡和IP协议安装都没有问题；
    - b.某些SERVER/CLIENT的应用程序在运行时需调用服务器上的资源，一般要指定SERVER的IP地址，但当该程序要在同一台机器上运行而没有别的SERVER时就可以把SERVER的资源装在本机，SERVER的IP地址设为127.0.0.1同样也可以运行。

- - **广播地址**：是专门用于同时向网络中所有工作站进行发送的一个地址。**在使用TCP/IP协议的网络中，主机标识段host ID为全1的IP地址为广播地址，广播的分组传送给host ID段所涉及的所有计算机**。例如，对于10.1.1.0 （255.255.255.0 ）网段，其广播地址为10.1.1.255（255 即为2 进制的11111111 ），当发出一个目的地址为10.1.1.255 的分组（封包）时，它将被分发给该网段上的所有计算机。

**24.DNS的概念，用途，DNS查询的实现算法**

- DNS用途：DNS是由解析器以及域名服务器组成的。域名服务器是指保存有该网络中所有主机的域名和对应IP地址，并具有将域名转换为IP地址功能的服务器。DNS使用TCP与UDP端口号都是53，主要使用UDP，服务器之间备份使用TCP。
- 域名到IP地址的解析过程的要点如下：

- - a.当某一个应用进程需要主机名解析为IP地址时，该应用进程就调用解析程序，并成为DNS的一个客户，把待解析的域名放在DNS请求报文中，以UDP用户数据报方式发给本地域名服务器。
  - b.本地域名服务器在查找域名后，把对应的IP地址放在回答报文中返回。应用进程获得目的主机的IP地址后即可进行通信。
  - c.若本地域名服务器不能回答该请求，则此域名服务器就暂时成为DNS中的另一个客户，并向其他域名服务器发出查询请求。这种过程直至找到能够回答该请求的域名服务器为止。

- DNS查询算法

- - **主机向本地域名服务器的查询一般都是采用递归查询**，即如果主机所询问的本地域名服务器不知道被查询域名的IP地址，那么本地域名服务器就以DNS客户的身份，向其他根域名服务器继续发出查询请求报文，而不是让该主机自己进行下一步的查询。 因此，递归查询返回的查询结果或是所要查询的IP地址，或是报错。
  - **本地域名服务器向根服务器的查询通常采用迭代查询**，即当根域名服务器收到本地域名服务器收到本地域名服务器发出的迭代查询请求报文时，要么给出所要查询的IP地址，要么告诉本地域名服务器“下一次应向哪个域名服务器进行查询”。然后让本地域名服务器进行后续的查询。根域名服务器通常把自己知道的顶级域名服务器的IP地址告诉本地域名服务器，让本地域名服务器再向顶级域名服务器查询。顶级域名服务器在收到本地域名服务器的查询请求后，要么给出所要查询的IP地址，要么告诉本地域名服务器下一步应当向哪一个权限域名服务器进行查询。本地域名服务器就这样进行迭代查询。

**25.TCP的流量控制**

- 1.利用滑动窗口实现流量控制

- - 如果发送方把数据发送得过快，接收方可能会来不及接收，这就会造成数据的丢失。所谓流量控制就是让发送方的发送速率不要太快，要让接收方来得及接收。利用滑动窗口机制可以很方便地在TCP连接上实现对发送方的流量控制。设A向B发送数据，在连接建立时，B告诉了A：“我的接收窗口是 rwnd = 400 ”(这里的 rwnd 表示 receiver window) 。因此，发送方的发送窗口不能超过接收方给出的接收窗口的数值。请注意，TCP的窗口单位是字节，不是报文段。TCP连接建立时的窗口协商过程在图中没有显示出来。再设每一个报文段为100字节长，而数据报文段序号的初始值设为1。大写ACK表示首部中的确认位ACK，小写ack表示确认字段的值ack。

![img](D:\personalSpace\Repository\Foundation-java\image\hytbmlmpwzw.jpeg)

- - 从图中可以看出，B进行了三次流量控制。第一次把窗口减少到rwnd=300 ，第二次又减到了rwnd=100 ，最后减到rwnd=0 ，即不允许发送方再发送数据了。这种使发送方暂停发送的状态将持续到主机B重新发出一个新的窗口值为止。B向A发送的三个报文段都设置了ACK=1 ，只有在ACK=1时确认号字段才有意义。TCP为每一个连接设有一个持续计时器(persistence timer)。只要TCP连接的一方收到对方的零窗口通知，就启动持续计时器。若持续计时器设置的时间到期，就发送一个零窗口控测报文段（携1字节的数据），那么收到这个报文段的一方就重新设置持续计时器。

- 2.必须考虑传输速率
- 可以用不同的机制来控制TCP报文段的发送时机。如：

- - a.TCP维持一个变量，它等于最大报文段长度MSS。只要缓存中存放的数据达到MSS字节时，就组装成一个TCP报文段发送出去。
  - b.由发送方的应用进程指明要求发送报文段，即TCP支持的推送( push )操作。
  - c.发送方的一个计时器期限到了，这时就把已有的缓存数据装入报文段(但长度不能超过MSS)发送出去。

- 3.Nagle算法
- 若发送应用进程把要发送的数据逐个字节地送到TCP的发送缓存，则发送方就把第一个数据字节先发送出去，把后面到达的数据字节都缓存起来。当发送方接收对第一个数据字符的确认后，再把发送缓存中的所有数据组装成一个报文段再发送出去，同时继续对随后到达的数据进行缓存。只有在收到对前一个报文段的确认后才继续发送下一个报文段。当数据到达较快而网络速率较慢时，用这样的方法可明显地减少所用的网络带宽。Nagle算法还规定：当到达的数据已达到 发送窗口大小的一半或已达到报文段的最大长度时，就立即发送一个报文段。
- 4.糊涂窗口综合证：TCP接收方的缓存已满，而交互式的应用进程一次只从接收缓存中读取1字节（这样就使接收缓存空间仅腾出1字节），然后向发送方发送确认，并把窗口设置为1个字节（但发送的数据报为40字节的的话）。接收，发送方又发来1个字节的数据（发送方的IP数据报是41字节）。接收方发回确认，仍然将窗口设置为1个字节。这样，网络的效率很低。要解决这个问题，可让接收方等待一段时间，使得或者接收缓存已有足够空间容纳一个最长的报文段，或者等到接收方缓存已有一半空闲的空间。只要出现这两种情况，接收方就发回确认报文，并向发送方通知当前的窗口大小。此外，发送方也不要发送太小的报文段，而是把数据报积累成足够大的报文段，或达到接收方缓存的空间的一半大小。

**26.TCP拥塞控制**

- 1.拥塞：拥塞：即对资源的需求超过了可用的资源。若网络中许多资源同时供应不足，网络的性能就要明显变坏，整个网络的吞吐量随之负荷的增大而下降。拥塞控制：防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提：网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。流量控制：指点对点通信量的控制，是端到端正的问题。流量控制所要做的就是抑制发送端发送数据的速率，以便使接收端来得及接收。拥塞控制代价：需要获得网络内部流量分布的信息。在实施拥塞控制之前，还需要在结点之间交换信息和各种命令，以便选择控制的策略和实施控制。这样就产生了额外的开销。拥塞控制还需要将一些资源分配给各个用户单独使用，使得网络资源不能更好地实现共享。
- 2.几种拥塞控制方法

- - 慢开始( slow-start )、拥塞避免( congestion avoidance )、快重传( fast retransmit )和快恢复( fast recovery )。

- 3.慢开始和拥塞避免
- 发送方维持一个拥塞窗口 cwnd ( congestion window )的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞。发送方控制拥塞窗口的原则是：只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去。但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。
- **慢开始算法**：当主机开始发送数据时，如果立即所大量数据字节注入到网络，那么就有可能引起网络拥塞，因为现在并不清楚网络的负荷情况。因此，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是说，由小到大逐渐增大拥塞窗口数值。通常在刚刚开始发送报文段时，先把拥塞窗口 cwnd 设置为一个最大报文段MSS的数值。而在每收到一个对新的报文段的确认后，把拥塞窗口增加至多一个MSS的数值。用这样的方法逐步增大发送方的拥塞窗口cwnd ，可以使分组注入到网络的速率更加合理。每经过一个传输轮次，拥塞窗口 cwnd 就加倍。一个传输轮次所经历的时间其实就是往返时间RTT。不过“传输轮次”更加强调：把拥塞窗口cwnd所允许发送的报文段都连续发送出去，并收到了对已发送的最后一个字节的确认。另外，慢开始的“慢”并不是指cwnd的增长速率慢，而是指在TCP开始发送报文段时先设置cwnd=1，使得发送方在开始时只发送一个报文段（目的是试探一下网络的拥塞情况），然后再逐渐增大cwnd。为了防止拥塞窗口cwnd增长过大引起网络拥塞，还需要设置一个慢开始门限ssthresh状态变量（如何设置ssthresh）。慢开始门限ssthresh的用法如下：

- - 当 cwnd < ssthresh 时，使用上述的慢开始算法。
  - 当 cwnd > ssthresh 时，停止使用慢开始算法而改用拥塞避免算法。
  - 当 cwnd = ssthresh 时，既可使用慢开始算法，也可使用拥塞控制避免算法。

- **拥塞避免算法**：让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口cwnd按线性规律缓慢增长，比慢开始算法的拥塞窗口增长速率缓慢得多。无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认），就要把慢开始门限ssthresh设置为出现拥塞时的发送方窗口值的一半（但不能小于2）。然后把拥塞窗口cwnd重新设置为1，执行慢开始算法。这样做的目的就是要迅速减少主机发送到网络中的分组数，使得发生拥塞的路由器有足够时间把队列中积压的分组处理完毕。如下图，用具体数值说明了上述拥塞控制的过程。现在发送窗口的大小和拥塞窗口一样大。

![img](D:\personalSpace\Repository\Foundation-java\image\mzuyzjy0ngrm.png)

- - a.当TCP连接进行初始化时，把拥塞窗口cwnd置为1。前面已说过，为了便于理解，图中的窗口单位不使用字节而使用报文段的个数。慢开始门限的初始值设置为16个报文段，即 cwnd = 16 。
  - b.在执行慢开始算法时，拥塞窗口 cwnd 的初始值为1。以后发送方每收到一个对新报文段的确认ACK，就把拥塞窗口值另1，然后开始下一轮的传输（图中横坐标为传输轮次）。因此拥塞窗口cwnd随着传输轮次按指数规律增长。 当拥塞窗口cwnd增长到慢开始门限值ssthresh时（即当cwnd=16时），就改为执行拥塞控制算法，拥塞窗口按线性规律增长。
  - c.假定拥塞窗口的数值增长到24时，网络出现超时（这很可能就是网络发生拥塞了）。更新后的ssthresh值变为12（即变为出现超时时的拥塞窗口数值24的一半），拥塞窗口再重新设置为1，并执行慢开始算法。 当cwnd=ssthresh=12时改为执行拥塞避免算法，拥塞窗口按线性规律增长，每经过一个往返时间增加一个MSS的大小。强调：“拥塞避免”并非指完全能够避免了拥塞。利用以上的措施要完全避免网络拥塞还是不可能的。“拥塞避免”是说在拥塞避免阶段将拥塞窗口控制为按线性规律增长，使网络比较不容易出现拥塞。

- 4.快重传和快恢复
- **快重传**：如果发送方设置的超时计时器时限已到但还没有收到确认，那么很可能是网络出现了拥塞，致使报文段在网络中的某处被丢弃。这时，TCP马上把拥塞窗口 cwnd 减小到1，并执行慢开始算法，同时把慢开始门限值ssthresh减半。这是不使用快重传的情况。快重传算法首先要求接收方每收到一个失序的报文段后就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时才进行捎带确认。接收方收到了M1和M2后都分别发出了确认。现在假定接收方没有收到M3但接着收到了M4。显然，接收方不能确认M4，因为M4是收到的失序报文段。根据可靠传输原理，接收方可以什么都不做，也可以在适当时机发送一次对M2的确认。但按照快重传算法的规定，接收方应及时发送对M2的重复确认，这样做可以让发送方及早知道报文段M3没有到达接收方。发送方接着发送了M5和M6。接收方收到这两个报文后，也还要再次发出对M2的重复确认。这样，发送方共收到了接收方的四个对M2的确认，其中后三个都是重复确认。快重传算法还规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段M3，而不必继续等待M3设置的重传计时器到期。由于发送方尽早重传未被确认的报文段，因此采用快重传后可以使整个网络吞吐量提高约20%。
- **快恢复**：

- - a.当发送方连续收到三个重复确认，就执行“乘法减小”算法，把慢开始门限ssthresh减半。这是为了预防网络发生拥塞。请注意：接下去不执行慢开始算法。
  - b.由于发送方现在认为网络很可能没有发生拥塞，因此与慢开始不同之处是现在不执行慢开始算法（即拥塞窗口cwnd现在不设置为1），而是把cwnd值设置为慢开始门限ssthresh减半后的数值，然后开始执行拥塞避免算法（“加法增大”），使拥塞窗口缓慢地线性增大。

- 5.停止等待协议和滑动窗口协议
- **停止等待协议**：是tcp保证传输可靠的重要途径，”停止等待”就是指发送完一个分组就停止发送，等待对方的确认，只有对方确认过，才发送下一个分组.
- **滑动窗口协议**：之所以叫滑动窗口协议，是因为窗口是不断向前走的，该协议允许发送方在停止并等待确认前发送多个数据分组。由于发送方不必每发一个分组就停下来等待确认，因此该协议可以加速数据的传输，还可以控制流量的问题。滑动窗口协议中，允许发送方发送多个分组（当有多个分组可用时）而不需等待确认，但它受限于在流水线 中为未确认的分组数不能超过某个最大允许数N。滑动窗口协议是TCP使用的一种流量控制方法，此协议能够加速数据的传输。 只有在接收窗口向前滑动时（与此同时也发送了确认），发送窗口才有可能向前滑动。收发两端的窗口按照以上规律不断地向前滑动，因此这种协议称为滑动窗口协议。当发送窗口和接收窗口的大小都等于1时，就是停止等待协议。

**27.TIME_WAIT状态及存在原因**

- 客户端与服务器端建立TCP/IP连接后关闭SOCKET后，服务器端连接的端口状态为TIME_WAIT；
- 主动关闭的Socket端会进入TIME_WAIT状态，并且持续2MSL时间长度，MSL就是maximum segment lifetime(最大分节生命期）；这是一个IP数据包能在互联网上生存的最长时间，超过这个时间将在网络中消失。MSL在RFC 1122上建议是2分钟，而源自berkeley的TCP实现传统上使用30秒，因而，TIME_WAIT状态一般维持在1-4分钟。
- 主动关闭的一方在发送最后一个ack后就会进入TIME_WAIT状态停留2MSL（max segment lifetime）时间这个是TCP/IP必不可少的，也就是“解决”不了的。
- TIME_WAIT状态存在的理由：

- - a.防止上一次连接中的包，迷路后重新出现，影响新连接（经过2MSL，上一次连接中所有的重复包都会消失）
  - b.可靠的关闭TCP连接:在进行关闭连接四路握手协议时，最后的ACK是由主动关闭端发出的，如果这个最终的ACK丢失，服务器将重发最终的FIN，因此客户端必须维护状态信息允 许它重发最终的ACK。

如果不维持这个状态信息，那么客户端将响应RST分节，服务器将此分节解释成一个错误。因而，要实现TCP全双工连接的正常终止，必须处理终止序列四个分节中任何一个分节的丢失情况，主动关闭 的客户端必须维持状态信息进入TIME_WAIT状态。

**28.Http2.0和Http1.0区别**

- Http2.0采用二进制格式非文本格式；
- Http2.0是完全多路复用的，非有序并阻塞的只需要一个连接即可实现并行；
- 使用报头压缩，降低了开销；
- Http2.0让服务器可以将响应主动推送到客户端缓存中。

**29.SMTP和POP3协议的区别**

- SMTP用来发生邮件的，端口号25；POP3用来接收邮件的，端口号110，使用TCP协议。